buildscript {
    repositories {
        mavenCentral()
        maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id 'war'
    id 'org.gretty' version '4.1.1'
    id 'com.vaadin'
}

defaultTasks("build")

repositories {
    mavenCentral()
    maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
    maven { url "https://plugins.gradle.org/m2/" }
}

gretty {
    contextPath = "/"
    servletContainer = 'jetty11'
}

// The following pnpmEnable = false is not needed as npm is used by default,
// this is just an example of how to configure the Gradle Vaadin Plugin:
// for more configuraion options please see: https://vaadin.com/docs/latest/guide/start/gradle/#all-options
vaadin {
    pnpmEnable = false
    frontendHotdeploy = false
    productionMode = true
    forceProductionBuild = true
}

dependencies {
    implementation enforcedPlatform("com.vaadin:vaadin-bom:$vaadinVersion")

    compileOnly("com.vaadin:flow-gradle-plugin:$vaadinVersion")
    // Vaadin
    implementation("com.vaadin:vaadin-core")

    // logging
    // currently we are logging through the SLF4J API to SLF4J-Simple. See src/main/resources/simplelogger.properties file for the logger configuration
    implementation "org.slf4j:slf4j-simple:2.0.7"
}

import com.vaadin.gradle.VaadinPrepareFrontendTask

tasks.withType(VaadinPrepareFrontendTask).configureEach {t ->
    try {
        t.outputs.previousOutputFiles.forEach { f ->
            println "${f.name} ### ${f.size()}"
        }
    } catch (Exception ex) {}
        //t.outputs.file(file(new File(project.projectDir, "/package.json")))
    //        .withPropertyName('outputProperties$vaadin_gradle_plugin.packageJson')
    //        .optional()
}